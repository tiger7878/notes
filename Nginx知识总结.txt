0、参考资料
	阿里文档：http://tengine.taobao.org/book/chapter_02.html
	windows版本：http://nginx-win.ecsds.eu/download/  #在windows环境要用windows版本，不然没有办法解决1024的限制。参考https://blog.csdn.net/qq_29407683/article/details/109216280
	
1、Nginx基础命令
		window：（需要切换到nginx.exe目录下cmd运行以下命令）
			查询命令：nginx -?
			版本：nginx -v #这里是小写的v
			详细信息：nginx -V #这里是大写的V，可以查看到对应的安装信息
			启动：start nginx
			检测配置文件：nginx -t
			重新加载配置文件：nginx -s reload
			快速停止：nginx -s stop #立刻停止，有用户在访问都会停止
			完整停止：nginx -s quit #优雅停止，有用户在访问，不会立刻停止，等用户访问完再停止
			重新装载日志文件：nginx -s reopen  #当access_log文件过大，我们把它重命名后，再创建一个access_log后需要执行该命令，否则文件不会保存到这里

2、进程
	查看命令：ps -ef | grep nginx
	master：主进程，只有1个，主要工作是管理worker进程
	worker：工作者进程，可以有多个，当把worker_processes配置为多个时，可以通过查看命令看见

3、配置文件
	user：默认是nobody，最好改成root，这样工作进程就有足够的权限
	worker_processes：工作进程数量，可以配置成跟CPU数量一致，如果服务器上有其他软件可以配置为CPU数量-1
	error_log：日志存放路径，编译安装时可以指定。日志级别由低到高：debug、info、notice、warn、error、crit
	worker_connections：每个进程的连接数，跟硬件配置相关，硬件配置越高这个值就可以配置越大
	include ：导入其他文件，由于我们的server会很多，所以采用这种导入的方式是最好的
	sendfile ：高效传输文件，需要保持打开
	tcp_nopush : 必须是在sendfile=on时使用，也是一种高效的方式，先获取，然后达到一定数量再发送。否则就是获取一次发送一次
	keepalive_timeout ：保持客户端连接的超时时间65秒
	gzip ：压缩功能，开启以后可以提高传输效率，节约带宽
	
4、nginx.pid异常处理
	nginx.pid 无法打开：需要根据提示创建下nginx.pid所在的目录文件夹
	nginx.pid number无效：需要使用./nginx -c nginx.conf全路径，重新配置下，然后再用./nginx -s reload重新加载就好了

5、日志切割
	手动切割：手动运行脚本
	自动切割：定时任务
	完善：找到windows下的实现方法
	
6、静态资源
	一个server对多个资源提供服务
	server {
		listen       90;
		server_name  localhost;
		
		# web站点静态资源，存放在E:/Nginx/web目录下，
		# 访问路径：http://localhost:90/
		location / {
			root   E:/Nginx/web;
			index  index.html index.htm;
		}
		
		# 图片、视频等资源，存放在E:/Nginx/images目录下，这种方式不好的就是客户知道我们真实路径-作废
		# 访问路径：http://localhost:90/images/a.png
		#location /images {
		#	root   E:/Nginx;
		#}
		
		# 图片、视频等资源，存放在E:/Nginx/images目录，这种方式客户不知道我们真实路径-推荐
		# 访问路径：http://localhost:90/static/a.png
		location /static {
			alias	E:/Nginx/images;
		}

	}

7、Gzip压缩
	目的：提高传输效率，节约带宽
	缺点：消耗CPU的资源
	gzip on #开启压缩功能
	gzip_min_length #限制最小压缩字节数，低于这个字节的文件就不压缩
	gzip_comp_level #压缩级别，文件越大，压缩越多，消耗CPU资源也多
	gzip_types #定义压缩文件的类型
	
8、location
	模糊匹配：直接location 后面是/xx
	精确匹配：location = /xx 
	正则表达式：location ~*  #其中~代表正则方法方式，其中*代表不区分大小写（不是必要的）
	
9、Nginx跨域支持
	#在server节点里面添加：
	#允许跨域请求的域，*代表所有
	add_header 'Access-Control-Allow-Origin' *;
	#允许带上cookie请求
	add_header 'Access-Control-Allow-Credentials' 'true';
	#允许请求的方法，比如 GET/POST/PUT/DELETE
	add_header 'Access-Control-Allow-Methods' *;
	#允许请求的header
	add_header 'Access-Control-Allow-Headers' *;	
	
	vue + nginx 出现跨域404 和401的解决方案：
	vue配置：
	proxyTable: {
      '/api': {
        target: baseUrl,
        changeOrigin: true,
        pathRewrite: {
          '^/api': ''
        }
      }
    }
	
	nginx配置：
	server {
        listen       80;
        server_name  localhost;

        location / {
			root   E:/nginx/dist;
            index  index.html index.htm;
        }
		
		# 跨域请求出现404和401的问题，注意必须带/
		location /api/ {
			proxy_pass http://42.194.146.219:8090/;
		}
	}
	
10、静态资源防盗链
	#在server节点里面添加：
	#对源站点验证
	valid_referers *.imooc.com;
	#非法引入会进入下方判断
	if ($invalid_referer) {
	return 404;
	}
	
11、Nginx负载均衡
	四层负载均衡：（基于协议层的TCP/UDP）F5、LVS、Haproxy
	七层负载均衡：（基于应用层的HTTP）Nginx、Haproxy、apache
	DNS地域负载均衡：

12、Jmeter性能测试
	网址：https://jmeter.apache.org/download_jmeter.cgi #下载Binaries的zip即可
	启动：
		windows环境：解压路径下bin/jmeter.bat
		mac环境：解压路径下bin/jmeter
	线程用户：
		右键测试计划-线程用户-线程组
		线程数：就是用户数
		循环次数：单个用户的累计请求数量
	取样器：
		右键线程组-取样器-HTTP请求
		协议：http
	监听器：
		右键测试计划-监听器
		查看结果树、聚合报告(可以认为当异常率为百分之多少都算正常)、用户表格查看结果
	
13、Nginx集群
	#在http节点内部配置：
	upstream tomcats {
		server 192.168.1.173:8080;
		server 192.168.1.174:8080;
		server 192.168.1.175:8080;
	}
	
	server {
		listen       80;
		server_name  www.mknginx.com;
		
		location / {
			proxy_pass  http://tomcats;
		}
	}  
	
14、负载均衡策略
	轮询（默认）：所有服务器的机会是均等的
	加权轮询：weight=1 (默认的权重)，值越大被分配的访问量就越大。
	ip_hash：针对ip地址进行hash算法得到分配到哪一台服务器，以后也会一直分配到这台。一致性hash算法推荐。
	url_hash：针对url地址进行hash算法
	least_conn：最少连接数，哪台服务器的连接数最少，就选哪台
	
	#在http节点内部配置：
	upstream tomcats {
		ip_hash; #ip_hash策略
		hash $request_uri; #url_hash策略
		least_conn; #least_conn策略

		server 192.168.1.173:8080 weight=1;
		server 192.168.1.174:8080 weight=2;
		server 192.168.1.175:8080 weight=3;
	}
	
15、upstream参数：
	网址：http://nginx.org/en/docs/http/ngx_http_upstream_module.html
	max_conns：单个server的并发最大连接数，默认是0，表示没有限制
	slow_start：慢慢的启动到weight指定的值，商业版才可以用
	down：指定某台服务器挂掉了
	backup：备用机，有服务器挂了以后才会启用它
	max_fails：最大的错误次数。默认值1.
	fail_timeout：达到最大次数以后，一定的时间段内不会再请求这台，过了这个时间才会再请求。默认值10秒
	
16、keeplive
	网址：http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive
	#在http节点内部配置：
	upstream tomcats {
		server 192.168.1.173:8080 weight=1;
		#server 192.168.1.174:8080 weight=2;
		#server 192.168.1.175:8080 weight=3;
		
		keepalive 32;
	}
	server {
		listen 80;
		server_name www.tomcats.com;
		location / {
			proxy_pass http://tomcats;
			proxy_http_version 1.1;
			proxy_set_header Connection "";
		}
	}
	
	字段说明：
	keepalived ： 设置长连接处理的数量，用于提高吞吐量
	proxy_http_version ：设置长连接http版本为1.1
	proxy_set_header ：清除connection header 信息
	
17、缓存
	对象：针对的是静态资源：html、css、js、图片等
	配置expires，通过在浏览器中查看Cache-Control、Expires观察区别
	#在location节点内部
	location /static {
		alias	E:/Nginx/images;
		#expires 10s; #缓存失效时间为10秒
		#expires epoch; #不使用缓存
		#expires off; #默认配置，有缓存，默认使用浏览器的缓存机制
		expires max; #永远不过期
	}
	
18、Nginx的反向代理缓存
	节点：跟server相同级别
	# proxy_cache_path 设置缓存目录
	# keys_zone 设置共享内存以及占用空间大小
	# max_size 设置缓存大小
	# inactive 超过此时间则被清理
	# use_temp_path 临时目录，使用后会影响nginx性能，使用off表示关闭临时目录
	proxy_cache_path /usr/local/nginx/upstream_cache keys_zone=mycache:5m max_size=1g inactive=30s use_temp_path=off;
	
	location / {
		proxy_pass http://tomcats;
		# 启用缓存，和keys_zone一致
		proxy_cache mycache;
		# 针对200和304状态码缓存时间为8小时
		proxy_cache_valid 200 304 8h;
	}
	
19、https配置
	下载路径：http://nginx.org/en/download.html
	免费的ssl：可以在腾讯云上申请一个免费的ssl，但是只能给www域名使用
	创建临时文件：mkdir -p /var/temp/nginx  否则启动时报错
	编译时需要把ssl模块编译进去
	./configure \
	--prefix=/usr/local/nginx \
	--pid-path=/var/local/nginx/nginx.pid \
	--lock-path=/var/lock/nginx.lock \
	--error-log-path=/var/log/nginx/error.log \
	--http-log-path=/var/log/nginx/access.log \
	--with-http_gzip_static_module \
	--http-client-body-temp-path=/var/temp/nginx/client \
	--http-proxy-temp-path=/var/temp/nginx/proxy \
	--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \
	--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \
	--http-scgi-temp-path=/var/temp/nginx/scgi \
	--with-http_ssl_module
	
	安装
	make
	make install
	
	配置HTTPS
	把ssl证书 *.crt 和 私钥 *.key 拷贝到 /usr/local/nginx/conf 目录中。
	新增 server 监听 443 端口：
	server {
		listen 443;
		server_name www.imoocdsp.com;
		# 开启ssl
		ssl on;
		# 配置ssl证书
		ssl_certificate 1_www.imoocdsp.com_bundle.crt;
		# 配置证书秘钥
		ssl_certificate_key 2_www.imoocdsp.com.key;
		# ssl会话cache
		ssl_session_cache shared:SSL:1m;
		# ssl会话超时时间
		ssl_session_timeout 5m;
		# 配置加密套件，写法遵循 openssl 标准
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
		ssl_prefer_server_ciphers on;
		
		location / {
			proxy_pass http://tomcats/;
		}
	}
	免费的ssl网站：https://freessl.cn/ #它生成的证书是full_chain.pem，直接使用，生成时选择：验证类型：文件验证，CSR生成：浏览器生成
	
	开机启动：
	vim /etc/rc.local
	在最后一行增加 /usr/local/nginx/sbin/nginx
	查看下它是否有执行权限，如果没有执行： chmod 755 rc.local ，如果有就不执行了
	
20、日志查看
	tail xxx.log #打印最后的一些信息
	tail xxx.log -f #动态查看最后的信息，一旦日志变化，界面也会变化
	ctrl+c ：退出tail命令
	
21、keepalived
	对于nginx的高可用，防止一台nginx挂了以后，整个服务都挂掉了
	网址：https://www.keepalived.org/download.html 
	核心配置文件：需要安装到/etc下面，在/etc/keepalived下会有keepalived.conf
	安装路径：/usr/local/keepalived
	启动：切换到安装路径下sbin/下执行： ./keepalived #启动后通过ip addr发现多了一个虚拟ip，备节点在没有启用时是不会多一个虚拟ip的
	注意：哪台机器存活时，哪台机器就会多一个虚拟ip
	注册成服务：
		cp /解压路径下/keepalive/etc/init.d/keepalived /etc/init.d/
		cp /解压路径下/keepalive/etc/sysconfig/keepalived /etc/sysconfig/
	刷新服务： systemctl daemon-reload
	启动服务： systemctl start keepalived.service
	停止服务： systemctl stop keepalived.service
	重启服务： systemctl restart keepalived.service
	监控nginx服务并自动重启：需要写脚本来实现定时监听nginx的请。#如果只是nginx挂了，keeealived没有挂，那么网站是不能访问的，也不会切换到备的keeealived
	双机主备：主机挂了以后，自动切换为备机提供服务。这里一个资源浪费的问题，备机一直闲置。
	双主热备：依赖于DNS轮询（同一个域名解析到不同的ip地址的服务器上），实现两台主keeealived同时在线。资源没有浪费，主机和备机都在提供服务。
	
22、LVS
	linux集成的负载均衡
	要求：lvs所在的服务器和nginx所在的服务器都需要创建一个虚拟ip，lvs的虚拟ip用于接收请求，nginx的虚拟ip用于返回响应隐藏真实IP地址
	注意：阿里云不支持虚拟ip，腾讯云一台服务器最多支持10个虚拟ip，需要付费购买
	模式使用DR模式，推荐
	安装：ipvsadm
	arp-ignore：0-本机所有ip都能处理请求，1-本机指定ip才能处理请求（使用它）
	arp-announce：0-本机所有网卡都返回响应，1-尽可能避免本网卡不匹配的目标通告，2-本网卡通告（使用它）
	高可用：Keepalived+LVS
	
	
	性能优化：
	worker_processes ：进程数、配置跟CPU核心数一样
	worker_connections：每个进程链接数、受操作系统的nofile数影响，比如linux通过ulimit -n查看到值
		最大并发数：
		对于HTTP请求本地资源来说，能够支持的最大并发数量是worker_connections * worker_processes。例如VPN就是正向代理。
		而如果是HTTP作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/2。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。例如nginx负载均衡就是反向代理。
		
	常用配置：	
	文件上传：
		默认只支持1M文件，如果超过1M会提示：
			Access to XMLHttpRequest at 'http://b.w.com/file/upload/' from origin 'http://a.w.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
			POST http://b.w.com/file/upload/ net::ERR_FAILED
		解决方案：
			在server节点里面添加：
				server
				{
					listen 80;
					server_name _;
					client_max_body_size 20m; #控制上传文件大小为20M
				}
				
23、Nginx配置上传文件大小限制
	方式一：针对其中一个服务
    server {
		listen 80;
		server_name www.tomcats.com;
		
		client_max_body_size 10M;                    #上传文件大小限制
		sendfile        on;                          #设置为on表示启动高效传输文件的模式
		keepalive_timeout  1800;                     #保持连接的时间，默认65s
		
		location / {
			proxy_pass http://tomcats;
			proxy_http_version 1.1;
			proxy_set_header Connection "";
		}
	}

	方式二：针对所有的服务
    还有一种方式是给http节点配置
	http{
		include       mime.types;
		default_type  application/octet-stream;
		
		sendfile        on;
		keepalive_timeout  65;
		
		# 配置nginx上传文件最大限制
		client_max_body_size 50m;  #这里是50M的写法
	}
	
24、Nginx分割access.log日志
	在nginx的log文件夹下创建目录bak
	在nginx的log文件夹下创建脚本cut_logs.sh
	#!/bin/bash
	log_path=/usr/local/nginx/logs/access.log
	save_path=/usr/local/nginx/logs/bak/access_$(date +%Y%m%d -d 'yesterday').log
	cp $log_path $save_path && echo > $log_path
	给脚本运行的权限：chmod +x cut_logs.sh
	运行一次脚本看效果
	
	设置定时任务
	crontab -e
	0 0  * * * /usr/bin/sh cut_logs.sh #每天的00:00执行日志切分
	
	查看定时任务是否添加成功
	crontab -l
	