1、查询
	查询表的字段信息：SHOW FULL COLUMNS FROM 表名
	查询表中所有字段到一列：select group_concat(COLUMN_NAME) from information_schema.COLUMNS where table_name = '表名';
	获取当前日期: select curdate(); 
	获取当月最后一天: select last_day(curdate());   
	获取本月第一天: select DATE_ADD(curdate(),interval -day(curdate())+1 day); 
	获取下个月的第一天: select date_add(curdate()-day(curdate())+1,interval 1 month); 
	获取当前月的天数: select DATEDIFF(date_add(curdate()-day(curdate())+1,interval 1 month ),DATE_ADD(curdate(),interval -day(curdate())+1 day)) from dual;
	查看数据库文件大小：
		进入information_schema数据
		select concat(round(sum(DATA_LENGTH/1024/1024),2),'MB') as data from TABLES where table_schema='数据库名称bai';

2、表修改
	表添加字段
	alter table   table1 add id int unsigned not Null auto_increment primary key
	
	-- 在test_table 表的 valid_status 字段之后，新增一个字段，设置对应的类型，长度，是否为null，默认值，注释
	ALTER TABLE test_table ADD COLUMN `is_staff` tinyint(2) NOT NULL DEFAULT '0' COMMENT '是否是从业人员 0否 1是' AFTER `valid_status`;
	
	-- 修改一个字段的类型
	ALTER TABLE test_table MODIFY test_value VARCHAR(10) NOT NULL DEFAULT '' COMMENT '字段注释';
	 
	-- 修改一个字段的名称，此时要重新指定该字段的类型
	ALTER TABLE test_table CHANGE test_value_old test_value_new VARCHAR(10) NOT NULL DEFAULT '' COMMENT '字段注释';
	
	-- 删除test_table表的 test_value字段 
	ALTER TABLE test_table DROP COLUMN test_value;
	
	-- 添加索引
	ALTER TABLE table_name ADD INDEX index_name (column) 
	
	-- 删除索引
	alter table table_name DROP INDEX index_name;
	
3、关联更新
	UPDATE del_sheet1 a
	JOIN bi_enterprise_info b ON a.enterprise_name=b.enterprise_name
	SET a.score=b.score
	
4、日期
	格式化：date_format(sysdate(),'%Y-%m-%d') 得到的是：年-月-日
	
5、性能优化
	explain 来判断执行是否需要优化
	type：为all 的时候代表全部扫描，需要优化
	extra：Using temporary，Using filesort，Using where 需要优化
	id：值越大越先执行，值相同的就从上到下执行
	最左前缀法则：
		联合索引创建时注意索引的字段的先后顺序，因为创建索引树的时候会根据先后顺序来创建，查询时可以不用按照顺序写
		联合索引的所有字段用上或者用到第一个字段也会走索引，否则全表扫描，
		范围查找之后的索引字段是不会再走索引了
		可以看key_len判断走了几个索引字段
	覆盖索引：就是查询的字段都在联合索引字段里面，这是最高效的一种做法，但是通常可能达不到
	不要在索引列做任何操作（计算，函数，类型转换），这些都会导致索引失效
	日期类型：对于有datetime类型的数据加索引以后，要想选择某个天或者某区间的数据，不要用日期函数，要用大于小于这些比较方法就可以走索引
	索引个数：一张表的单个索引越多，新增，修改时越慢，联合索引可以解决这个问题，但是联合索引的使用要注意顺序和个数
	不等于、is null 、is not null 走全表扫描
	like通配符，针对%在右边可以走索引。如果一定要用like %%，那么就用查询联合所有中的字段就会走索引，如果查询的字段超出了联合索引可以使用搜索引擎比如ElasticSearch
	字符串如果不加单引号也会导致索引失效
	少用or或in
	建表建议：不要给字段用null，一般都要给一个默认的值，整形就是0，可以为空的就给空字符串。索引字段，一定不能为null
	trace工具：索引分析工具，开启后会影响性能，不要在生产环境开启，用了要关闭
		开启方式：set session optimizer_trace="enabled=on",end_markers_in_json=on;
		使用方式：先执行sql语句，紧接着再执行：select * from information_schema.OPTIMIZER_TRACE;
	order by排序时也会按照索引树来的，也是最左原则，如果where里面有第一个字段，order by先是第二个字段，再是第三个字段就走索引，如果先是第三个字段，后是第二个字段就不走索引。
		优化：原来order by 日期的，可以修改为order by 主键自增长id，因为id和日期是同步的，这样就不用走文件排序，而是走索引排序
		示例：
			EXPLAIN SELECT * FROM bz_customer ORDER BY id LIMIT 0,3;
			EXPLAIN SELECT * FROM bz_customer ORDER BY gmt_create LIMIT 0,3;
	group by的规则跟order by是一模一样的
		如果不需要排序可以写order by null
		where性能高于having，能写在where里面的就不要写在having里面
	分页查询优化：
		原始语句（不效率）：SELECT * FROM bi_enterprise_info LIMIT 10000,10;
		优化方式一：
			SELECT * FROM bi_enterprise_info a
			INNER JOIN 
			(
				SELECT id FROM bi_enterprise_info ORDER BY id DESC LIMIT 10000,10
			)b
			on b.id=a.id
		优化方式二：SELECT * FROM bi_enterprise_info ORDER BY id DESC LIMIT 10000,10;  根据索引字段进行排序都会走索引，所以这种方式也是一种优化
	join优化：关联字段加索引
	in和exists优化：
		使用in的场景：B表的数据集小于A表的数据集时
			select * from A where id in（select id from B）  #先执行的是查询B表
		使用exists场景：A表的数据集小于B表的数据集时
			select * from A where exists (select 1 from B where B.id=A.id) #先执行的是查询A表
	count优化：
		count不要非主键，因为它扫描到空值是不会增加值的，会导致数量统计有误
		count速度从快到慢：count(1)>count(非主键索引)==count(*)>count(主键)。如果是5.7版本推荐count(*)
	
6、去除重复数据保留一条
	重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录
	delete from people where peopleId in (select peopleId from people group by peopleId having count(peopleId) > 1) and rowid not in (select min(rowid) from people group by peopleId having count(peopleId )>1)	
	
7、数据库被锁住以后解锁
	查看被锁住的信息，其中trx_mysql_thread_id 为线程id
	select * from information_schema.innodb_trx;
	干掉线程：
	kill trx_mysql_thread_id
	查询某个线程：
	SELECT * from information_schema.processlist WHERE id = trx_mysql_thread_id;
	查询所有线程：
	show full processlist;
	
8、还原数据库问题
	还原时提示：MySQL server has gone away
		show VARIABLES like '%max_allowed_packet%';
		得到的结果是：1048576，也就是1M
		我们可以设置为2G
		set global max_allowed_packet = 2*1024*1024*1000
		设置完以后再看下