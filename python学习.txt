1、官网：https://www.python.org/
	选择python 3.6版本：Windows x86-64 executable installer
	
2、开发工具PyCharm
	网址：https://www.jetbrains.com/pycharm/download/#section=windows
	选择：Professional专业版
	
3、Mysql
	下载地址：https://dev.mysql.com/downloads/mysql/
	版本选择：MySQL Community Server 5.6
	数据库 字符集：utf8mb4 -- UTF-8 Unicode
			排序规则：utf8mb4_general_ci

4、虚拟环境
	windows环境：cmd下执行
		pip install virtualenv
		pip install virtualenvwrapper-win
		
5、计算机网络
	书籍：计算机网络自顶向下方法（第六版）、TCP/IP协议族（第4版）
	动态ip：家里的网络一定时间会更换IP。一般不要封ip，没用
	
6、基础数据类型
	r：多行字符串
	u：表示Unicode编码，不加它，中文就不能正常显示。
	字符串：
			字符串截取：利用的是切片：'ABCDEFG'[:3]、'ABCDEFG'[-3:]、'ABCDEFG'[::2]
			isinstance(x, str) 可以判断变量 x 是否是字符串
			x.upper()：把字符串x变成大写
			s.strip(rm)：删除 s 字符串中开头、结尾处的 rm 序列的字符。当rm为空时，默认删除空白符（包括'\n', '\r', '\t', ' ')
			
	布尔类型：Python把0、空字符串''和None看成 False，其他数值和非空字符串都看成 True
	
	list:[]有序集合，里面可以是各种类型的数据。
		示例：L = ['Adam', 'Lisa', 'Bart']
		通过索引获取值：L[0]
		append(data)总是把新的元素添加到list的尾部
		insert(index,data)：把元素插入指定位置
		pop()：删除最后一个元素
		pop(index)：删除指定位置的元素
		range(n)：切片获取0-n索引的元素
		L[0:3]：取前3个元素
		L[::2]：第三个参数表示每N个取一个，上面的 L[::2] 会每两个元素取出一个来，也就是隔一个取一个
		range(1,101)得到一个数列：[1, 2, 3, ..., 100]
		
	tuple：（）元组，一旦创建完毕，就不能修改
		示例：t = ('Adam', 'Lisa', 'Bart')
		通过索引获取值：t[0]
		只有一个元素时在最后加,来表示它是一个tuple
		len(t)：获取tuple中元素的个数
		
	缩进规则：具有相同缩进的代码被视为代码块
	
	if：
		if 、else 、elif 表达式后面都有冒号：
	for循环：
		示例：L = ['Adam', 'Lisa', 'Bart']
				for name in L:
					print name
	break：退出循环
	continue：跳过本次循环，进行下一次循环
	
	dict：字典（键值对），key不能重复，无序集合
		示例：d = {'Adam': 95,'Lisa': 85,'Bart': 59}
		len(d)：获取集合中元素的个数
		d[key]：获取value，如果获取不到就报错
		d.get(key)：获取value，如果获取不到返回None
		判断key是否存在：if 'Paul' in d:
		d[key]=value：向dict中更新/插入键值对
		for key in d：循环遍历key
	
	defaultdict ：比dict更加好用
		参数是dict：defaultdict(dict)
		参数是list：defaultdict(list)
	
	set：没有重复元素，无序集合，区分大小写
		示例：s = set(['A', 'B', 'C'])
		'A' in s：判断set中是否有A
		set中必须是不变对象，任何可变对象不能放入set中
		for name in s: 遍历元素
		s.add(value)：添加元素，如果已经存在，也不会报错
		s.remove(value)：删除元素，如果删除元素不存在，会报错，所以删除前需要判断
		
7、函数
	定义一个函数要使用 def 语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用 return 语句返回
	实例：def my_abs(x):
	如果没有return语句，函数执行完毕后也会返回结果，只是结果为 None.return None可以简写为return。
	return x,y：表示返回多个值
	默认参数：def power(x, n=2): 。第二个参数可传，可不传。默认参数只能定义在必需参数的后面：
	可变参数：* 。示例：def fn(*args):
	
8、迭代
	索引迭代： enumerate()
		实例：L = ['Adam', 'Lisa', 'Bart', 'Paul']
				for index, name in enumerate(L):
					print index, '-', name
	zip函数合并： 
		实例：L = zip([10, 20, 30], ['A', 'B', 'C']) 得到的是[(10, 'A'), (20, 'B'), (30, 'C')]
				for index, name in L:
					print(index, name)
	迭代dict的value：
		示例：
		d = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }
		for v in d.values():  #占内存，d.values()得到list
		for v in d.itervalues(): #不占内存
	
	迭代dict的key和value：
		示例：
			d = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }
			for key, value in d.items():
			print key, ':', value
			
9、生成列表
		range(1, 11)得到：[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		[x * x for x in range(1, 11)]得到：[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
		range(1, 100, 2)得到：[1, 3, 5, 7, 9,...]
		[x * x for x in range(1, 11) if x % 2 == 0]得到：[4, 16, 36, 64, 100]

10、类：
	关键字：class
	类名：类名首字母大写
	实例：同一个类的每个实例拥有各自不同的属性，但是，现实世界中，一种类型的实例应该拥有相同名字的属性
	构造函数：__init__(self,xx,xx)，第一个参数必须是 self
	任意关键字参数:**kw
		def __init__(self, name, gender, birth, **kw):
			self.birth = birth
			for k, v in kw.iteritems():
				setattr(self, k, v)
	属性：通常是没有访问控制,__双下划线开头的通常是不能被外部访问
	类的属性：定义在类里面，类属性有且只有一份，通过类名进行访问。相当于java中的静态变量
	实例属性：定义在__init__方法中，实例属性每个实例各自拥有，互相独立，通过对象名进行访问
	属性优先级：当实例属性和类属性重名时，实例属性优先级高
	打印所有属性：dir(对象)
	实例方法：在类中定义的函数，它的第一个参数永远是 self
	类方法：注意类方法需要添加 @classmethod，通过类名调用，相当于java中的静态方法
	type() 函数获取变量的类型
	getattr(s, 'name')  # 获取s对象的name属性
	getattr(s, 'age', 20)  # 获取age属性，如果属性不存在，就返回默认值20
	setattr(s, 'name', 'Adam')  # 设置s对象新的name属性
	
11、高阶函数
	概念：把方法名作为函数的参数
	map函数：接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。
		示例：
		def f(x):
			return x*x
		print map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
		得到：
		[1, 4, 9, 10, 25, 36, 49, 64, 81]
		
	reduce函数：接收的参数和 map()类似，一个函数 f，一个list，传入的函数 f 必须接收两个参数，对list的每个元素反复调用函数f，并返回最终结果值
		示例：
		def f(x, y):
			return x + y
		reduce(f, [1, 3, 5, 7, 9])
		得到：25
		该函数可以有3个参数。第三个参数作为初始的值
		
	filter函数：接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。
	
	sorted函数：接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0
		示例：
		def reversed_cmp(x, y):
			if x > y:
				return -1
			if x < y:
				return 1
			return 0
		sorted([36, 5, 12, 9, 21], reversed_cmp)
		得到：
		[36, 21, 12, 9, 5]
		sorted([36, 5, 12, 9, 21])得到：[5, 9, 12, 21, 36]。
		sorted(['bob', 'about', 'Zoo', 'Credit'])得到：['Credit', 'Zoo', 'about', 'bob']。字符串进行排序，字符串默认按照ASCII大小来比较
		
		list中的对象根据name属性排序：
		class Person(object):
			pass
		p1 = Person()
		p1.name = 'Bart'
		L1 = [p1, p2, p3]
		sorted(L1, lambda p1, p2: cmp(p1.name, p2.name))
	
	python中返回函数：函数内部定义一个函数，然后返回该函数名
		示例：
			def f():
				print 'call f()...'
				# 定义函数g:
				def g():
					print 'call g()...'
				# 返回函数g:
				return g
	
12、装饰器decorator
	用于增加函数的功能，简化代码，避免每个函数都写一遍。相当于java中的AOP
	打印日志：@log
	监测性能：@performance
	数据库事务：@transaction
	URL路由：@post('/xxx')
	
13、模块和包
	模块：一个py文件就是一个模块。不同的模块下面可以有同名的函数和变量，互相不影响
		test.py的模块名称是test
		import test 就引入了test模块
		test.xx() 调用test模块下的xx方法
	包：文件夹就是包，不同的包下面可以有同名的模块，互相不影响
		包下面必须有__init__.py文件，即使该文件是个空文件。每一层都必须有
	动态导入：先尝试从cStringIO导入，如果失败了（比如cStringIO没有被安装），再尝试从StringIO导入
		try:
			from cStringIO import StringIO
		except ImportError:
			from StringIO import StringIO
	__future__：旧版本测试新版本的特性
	安装第三方模块：pip install xx.py。第三方模块搜索的网址：https://pypi.org/
	常用包：math、json、threading
	
14、类的继承
	在子类的__init__方法中，需要调用父类的super(子类, self).__init__()方法
	isinstance(变量,类)判断类型变量是否是这个类型
	多重继承：python允许多重继承
	
15、特殊方法
	魔术方法：__xx__，两个下划线的方法，默认有好多
	打印对象：重写__str__方法，否则就是打印出对象的类名
	比较函数：cmp(x,y)方法，排序的时候默认调用它
	获取长度：len方法，获取元素个数，
	关联函数要实现时必须都实现：__getattr__ 、__setattr__ 、 __delattr__
	get方法：用@property装饰。有get没有set就是一个只读属性
	set方法：用@属性.setter装饰，在这里进行值有效性校验
		@property
		def score(self):
			return self.__score
		@score.setter
		def score(self, score):
			if score < 0 or score > 100:
				raise ValueError('invalid score')
			self.__score = score
	限制添加属性：__slots__
		__slots__ = ('name', 'gender', 'score')
	__call__：重写该方法可以使一个对象被调用
	
16、格式化
	编码：# -*- coding: utf-8 -*-
	格式化的字符串：'(I am %s、I am %d years old)' % ('Tom', 18) 得到的是：(I am Tom、I am 18 years old)
	%d：整数
	%f：浮点数
	%s：字符串，它会把任何数据类型转换为字符串
	%x：十六进制整数
	%%：字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%
	format：用传入的参数依次替换字符串内的占位符{0}、{1}..，不过这种方式写起来比%要麻烦得多
		'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)，得到：'Hello, 小明, 成绩提升了 17.1%'。
		
17、HTTP协议
	它本质还是一串字符串
	content-type:
		form表单提交：application/x-www-form-urlencoded
		文件上传：multipart/form-data
		json格式：application/json
		
18、requests
	它是Python的http库
	文档：http://docs.python-requests.org/zh_CN/latest/user/quickstart.html
	安装：pip install requests
	使用requests是完全可以伪装成一个浏览器，来做get、post等http请求
	get请求：
	# res = requests.get(url)
	# res = requests.get(url, params=param)
	# res = requests.get(url, headers=my_headers)
	# print("返回的内容：" + res.text)
	# print("编码：" + res.encoding)
	# print("状态码：%d" % res.status_code)
	# print(res.headers)

	post请求：
	# data：字符串
	# json：json数据
	# res = requests.post(url, data=param)
	# res = requests.post(url, data=json.dumps(param).encode("utf8"))
	res = requests.post(url, json=param, headers=my_headers)
	print("返回的内容：" + res.text)
	# 把响应的数据转换为json
	print(res.json())
	
19、正则表达式
	引入包：re
	math方法：从字符串最开始匹配的，返回的是一个对象
	sub方法：字符串替换
	search：不是从字符串最开始匹配
	
20、beautifulsoup4
	官网：https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html
	安装：pip install beautifulsoup4
	引入：from bs4 import BeautifulSoup
	使用：bs = BeautifulSoup(html, "html.parser")
		# 根据id查找
		# div_tag = bs.find(id="list")
	find方法：
		# 查找到第一个div
		# div_tag = bs.find("div")
		# 根据id查找
		# div_tag = bs.find(id="list")
		#  查找id=list的div
		# div_tag = bs.find("div", id="list")
		# 通过正则表达式
		# div_tag = bs.find("div", id=re.compile("info-\d+"))
		# 根据字符串来查找
		# div_tag = bs.find(string="胜多负少121")
		# 这个正则匹配好像不管用
		div_tag = bs.find(string=re.compile("list"))
		print(div_tag)
	
21、xpath
	它比bs更好
	内置方法：https://developer.mozilla.org/en-US/docs/Web/XPath/Functions
	windows安装scrpay
		先安装c++ buildtools：https://www.microsoft.com/en-us/download/details.aspx?id=48159
		安装lxml：pip install lxml
		安装Twisted：pip install twisted
		
		另一个安装网址：https://www.lfd.uci.edu/~gohlke/pythonlibs/，搜索lxml、twisted、scrapy。注意版本
			本项目的终端下：pip install E:\python\package\Twisted-19.2.0-cp36-cp36m-win_amd64.whl
					pip install E:\python\package\Scrapy-1.6.0-py2.py3-none-any.whl
			
	引入包：from  scrapy import Selector
	
	sel = Selector(text=html)
		# 获取到元素，用索引来控制某一个，取到的可能是多个
		tag = sel.xpath('//*[@id="myP"]').extract()[0]
		print(tag)
		# 获取元素里面的值
		tag_text = sel.xpath('//*[@id="myP"]/text()').extract()[0]
		print(tag_text)
	
		# 属性全值匹配
		# teacher_tag = sel.xpath("//div[@class='teacher_info info']")
		# 属性部分值包含
		# teacher_tag = sel.xpath("//div[contains(@class,'teacher_info')]")
		# 获取最后一个元素
		# teacher_tag = sel.xpath("//div[contains(@class,'teacher_info')]/form/input[last()]").extract()
		# 获取value属性的值
		# teacher_tag = sel.xpath("//div[contains(@class,'teacher_info')]/form/input[last()]/@value").extract()
		# print(teacher_tag)
		# 获取多个元素
		# div_tag = sel.xpath('//p[@class="pxx"]|//p[@class="pcc"]').extract()
		# 获取多个元素里面的值
		div_tag = sel.xpath('//p[@class="pxx"]/text()|//p[@class="pcc"]/text()').extract()
		print(div_tag)