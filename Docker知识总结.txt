基础篇
1、Docker的基本组成
	官网：https://docs.docker.com/engine/docker-overview/
		https://www.docker.com/get-started
	源码：https://github.com/docker
	Client：客户端
	Daemon：守护进程（服务器端）
	Image：镜像，它是容器的基石，层叠的文件系统。它是只读的。
	Container：容器，通过镜像启动，是启动和执行阶段。它是在镜像的最上层创建一个可写层。
	Registry：仓库，共有（Docker Hub），私有
	
2、命名空间
	PID：进程隔离
	NET：管理网络
	IPC：管理跨进程通信的访问
	MNT：管理挂载点
	UTS：隔离内核的版本表示
	这些隔离技术是通过Control groups控制组来实现的。
	Control groups可以实现：资源限定、优先级设定、资源计量、资源控制
	
3、Docker容器的能力
	文件系统隔离：每个容器都有自己的root文件系统
	进程隔离：每个容器都运行在自己的进程环境中
	网络隔离：容器间的虚拟网络接口和ip地址都是分开的
	资源隔离和分组：使用cgroups将CPU和内存资料的资源独立分配给每个Docker容器
	
4、Docker安装
	windows平台：访问Github上的Boot2Docker
	Mac OS系统：访问Github上的Boot2Docker
	CentOS7安装docker：
		参考网址：https://yq.aliyun.com/articles/110806?spm=5176.8351553.0.0.6a7219912MUsPW
		# step 1: 安装必要的一些系统工具
		sudo yum install -y yum-utils device-mapper-persistent-data lvm2
		# Step 2: 添加软件源信息
		sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
		# Step 3: 更新并安装 Docker-CE
		sudo yum makecache fast
		sudo yum -y install docker-ce
		# Step 4: 开启Docker服务
		sudo service docker start
		# Step 5: 安装校验
		docker version
	镜像加速器：阿里云-控制台-弹性计算-容器镜像服务-镜像中心-镜像加速器
		vim /etc/docker/daemon.json
		{
		  "registry-mirrors": ["https://自己的.mirror.aliyuncs.com"]
		}
		sudo systemctl daemon-reload
		sudo systemctl restart docker
	
5、Docker镜像	
	获取镜像：docker [image] pull NAME[:TAG] #从Docker Hub镜像源下载镜像
		NAME：镜像仓库的名称，用来区分镜像
		TAG：镜像标签，用来区分镜像版本，如果不指定，默认选择latest标签。切记不要在生产环境中用latest，因为很可能不稳定，需要用稳定版。
	查看镜像信息：
		docker images #列出所有镜像
		docker image ls 镜像仓库名	#查看单个镜像
	添加镜像标签：	docker tag ubuntu:18.04 myubuntu:latest  #可以直接使用，镜像ID相同，只是一个链接，并不是新的镜像
	查看镜像历史：docker history ubuntu:18.04 #可以查看到文件层级结构
	搜索进行：docker search [option] keyword #在Docker Hub官方仓库中搜索镜像
		docker search --filter=is-official=true nginx #	搜索官方提供的nginx镜像
	删除镜像：docker rmi 镜像名称:TAG 	#删除
		docker rmi -f 镜像名称:TAG		#强制删除
		docker rmi 镜像ID
	删除顺序：先删除容器，然后再删除镜像
	清理镜像：docker image prune #清理临时的镜像文件和没有被使用的镜像
	创建镜像：
		基于已有的容器创建：sudo docker commit -m '提交消息说明' -a '作者说明' 原容器ID 新镜像名称:新TAG  
		基于本地模板导入：
		基于Dockerfile创建：最常用的方式
	导出镜像：docker [image] save
		docker save -o test.tar test:0.1 #把镜像test导出成test.tar
	载入镜像：docker [image] load
		docker load -i test.tar  #导入镜像文件test.tar，这样就把镜像迁移了
	上传镜像：docker [image] push NAME:[:TAG]
	
6、Docker容器
	创建容器：docker [container] create [option] #新建的容器处于停止状态
		示例：docker create -it ubuntu:latest 
	启动容器：docker [container] start [option] #启动停止的容器
	重启容器：docker [container] restart
	新建并启动容器：
		docker run 镜像 命令 参数：#一次性启动和执行容器的命令
		docker run -it 镜像 /bin/bash #启动交互式容器，命令结束后就停止了
		docker run --name=自定义容器名称  #运行自定义名称的容器
		参数：-P ：随机映射一个49000-49900的端口，给容器外部访问
	查看容器：
		docker ps	#查看正在运行的容器
		docker ps -a #列出所有容器
		docker ps -l #列出最新的容器
		docker inspect 容器id/容器名称 #查看某个容器相关信息
				docker [image] inspect -f { {" . Architecture"}} ubuntu:18. 04	#获取镜像的Architecture信息
	查看容器输出日志： docker logs 容器ID
	删除已经停止的容器： docker rm 容器名
		docker rm -f 容器名 #强制删除一个运行中的容器
	centos和ubuntu查看日志：journalctl -u docker.service
	导出容器：docker [container] export -o xxx.tar 容器名称
	导入容器：docker [container] import xxx.tar - 仓库:TAG
	#注意：镜像文件保存完整记录，体积大。容器快照讲丢失所有的历史记录和元信息，只保存容器当时的快照状态，使用时注意
	查看统计信息：docker stats [options]  #CPU、内存、存储、网络
	复制文件：docker cp
	查看变更：docker diff
	查看端口映射：docker port 容器名称
	更新配置：docker update #更新容器的运行时配置
	查看Docker支持的容器操作子命令：docker container help
	把容器打包成镜像：docker commit  #有弊端，因为容器会有临时文件，临时文件就是垃圾文件，不推荐这种方式创建镜像
	
7、守护式容器
	用途：用于运行网站和服务，不会命令结束后就停止了
	启动守护式容器方式一：
		docker run -i -t 镜像 /bin/bash #启动交互式容器
	退出容器：ctrl+p 或者 ctrl+q 
	启动守护式容器方式二：docker run -d
	进入容器：docker [container] attach #后台运行的容器可以通过这种进入的方式来操作
	查看日志：docker logs
	查看容器的进程：.docker top
	在运行中的容器中执行命令：docker exec 
		示例：docker exec -it 容器ID /bin/bash	#进入容器
			 docker exec -it centos /bin/bash  #进入centos容器
			 exit	#退出
	拷贝一个文件到容器：docker cp 文件 容器:目录
	目录挂载：-v 宿主机目录:容器目录	#注意，挂载后宿主机的目录会覆盖掉容器目录里面的原内容
	停止容器：
		docker stop：发送信号等容器停止
		docker kill：直接干掉一个容器
		docker pause：暂停容器
		docker unpause：把暂停的容器恢复成运行状态
	数据挂载：可以用一个容器把各个容器的挂载配置起来，然后使用--volums-from 自定义的配置容器*(相当重要)
	
8、Docker仓库
	仓库分类：公有仓库、私有仓库
	仓库Repository：存放镜像的地方
	注册服务器Registry：存放仓库的服务器
	公共镜像仓库：Docker Hub，官网：https://hub.docker.com/
	第三方镜像市场：腾讯云、网易云、阿里云、时速云
	本地私有仓库：
		docker run -d -p 5000:5000 registry:2
		第二步：把镜像打上仓库地址
		第三步：修改私有仓库的配置以支持http，也就是私服地址insecure-registries：["ip地址","ip地址"]
				systemctl daemon-reload
				systemctl restart docker
		第三步：push镜像到私有仓库
	
9、端口映射与容器互联
	端口映射：-P随机一个端口，-p指定端口
		docker run -p 容器端口 -i -t 镜像 /bin/bash
		docker run -p 宿主机端口:容器端口 -i -t 镜像 /bin/bash
		docker run -p ip地址:容器端口 -i -t 镜像 /bin/bash
		docker run -p ip地址:宿主机端口:容器端口 -i -t 镜像 /bin/bash
	查看端口映射情况：docker port 容器名称
	互联机制：--link
		docker run -d -P --name web --link db:db training/webapp python app.py  #db容器与web容器简历互联关系，避免了数据库服务端口到外部网络
	
10、使用Dockerfile创建镜像
	Dockerfile是一个文件格式的配置文件
	基本结构：基础镜像信息、维护者信息、镜像操作指令和启动时执行的指令
	nginx简单的dockerfile示例：
		FROM ubuntu		#基础镜像信息
		LABEL maintainer docker user<docker user@email.com>  #维护者信息
		RUN echo "deb http://archive.ubuntu.com/ubuntu/ xeniel main universe" apt/sources.list >> /etc/  #镜像操作指令
		CMD /usr/sbin/nginx		#启动时执行的指令
	EXPOSE：申明镜像内服务监听的端口，只是申明，不会自动完成端口映射，需要启动容器时指定端口映射
	ENV：环境变量
	ADD：复制指定内容到容器中
	COPY：复制指定内容到容器中，当使用本地目录作为源目录时，推荐使用它
	ENTRYPOINT：推荐用它来替代CMD，明确容器的命令，防止启动时输入CMD替代了文件中的CMD。当ENTRYPOINT存在时CMD只是传参的作用
	注意：
		一个dockerfile文件的第一条指令必须是FROM
		一个dockerfile只能有一条CMD命令，有多条时只会执行最后一条
		创建镜像就是盖楼，每个run命令就是盖一层楼
	创建镜像：docker build [options] path
	配置匹配忽略：.dockerignore，支持正则
	多步骤创建：比如java，需要一个编译环境镜像和一个运行环境镜像
	最佳实践：
		Docker Hub 官方仓库中提供了大量的优秀镜像和对应的Dockefile ，可以通过阅读它们来学习如何撰写高效的Dockerfile
		精简镜像用途：尽量让每个镜像用途单一
		选择合适的基础镜像
	使用Maven插件以后，可以用一条maven命令可以打包并且创建镜像
	
实战篇：
1、	容器中部署Nginx	
	安装nginx
		apt-get install -y nginx
	安装vim：
		apt-get install -y vim
	创建目录：
		mkdir -p /var/www/html
		在该目录下创建index.html静态页面
	编辑nginx的配置文件
		whereis nginx #查看nginx安装在哪里
		修改配置文件中root的位置
	启动nginx：
		nginx
	查看：ps -ef
	退出：ctrl+p 或者ctrl+q
	访问：curl http://宿主机ip：端口
			curl http://容器ip
	重启容器后发现nginx并没有启动
	需要使用：docker exec web nginx：就是在容器中启动nginx进程
	如果容器的ip没有设置，每次重启容器会变化ip和端口
	
2、构建一个nginx容器
	创建一个Dockerfile
	FROM nginx	#基础镜像来源
	COPY index.html /usr/share/nginx/html	#把宿主机的index页面拷贝到nginx里面，自定义首页
	docker build -t my-nginx .	#在Dockerfile目录构建镜像
	docker run --name nginx2 -p 81:80 -d my-nginx	#运行容器并指定端口号
	

辅助工具：
	HAProxy：处理负载均衡，自动切换估值的应用容器